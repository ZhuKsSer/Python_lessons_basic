# EASY
# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

number = float (input('Введите произвольное десятичное число: '))

def my_round(number, ndigits=0):
    digits = 10 ** ndigits
    number = digits * number
    if (int((number) * 10) % 10) >= 5:
        return int(number +1)/digits
    else:
        return int(number)/digits

print(my_round(number,5))
print(my_round(number,2))
print(my_round(number))

# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить
#def lucky_ticket(ticket_number):
#	pass
#
#
#print(lucky_ticket(123006))
#print(lucky_ticket(12321))
#print(lucky_ticket(436751))


ticket_number = input('Введите шестизначный номер билета: ')
b = list(map(int, str(ticket_number)))


def lucky_ticket(b):
    if ((b[0] + b[1] + b[2]) == (b[3] + b[4] + b[5])):
        print("Счастливый билет!")
    else: 
        print("Несчастливый билет!")
lucky_ticket(b)

#NORMAL
# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

m = 1

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()
#
#
#def sort_to_max(origin_list):
#	pass
#
#sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

#n = 10


origin_list = [2, 10, -12, 2.5, 20, -11, 4, 4, 0]
print(origin_list)

def bubble_sort(origin_list):
    for l in range(len(origin_list)-1, 2, -1):
        corrected = False
        for item in range(0, l):
            if origin_list[item] > origin_list[item + 1]:
                origin_list[item], origin_list[item + 1] = origin_list[item + 1], origin_list[item]
                corrected = True
        if not corrected: break
    return origin_list
print(bubble_sort(origin_list))

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

origin_list = [1, 2, 2, 3, 4, 99, 4, 2, 10, -12, 10, 2.5, 20, 10, 3, -10, 6, 2, 15]
print(origin_list)

def filter_(arg, origin_list):
    lst = []
    for i in origin_list: 
        if i != arg: 
            lst.append(i)
    print(lst)
            
filter_(2, origin_list)

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

x1 = input('Введите координату х1 вершины A: ')
y1 = input('Введите координату y1 вершины A: ')
x2 = input('Введите координату х2 вершины B: ')
y2 = input('Введите координату y1 вершины B: ')
x3 = input('Введите координату х1 вершины C: ')
y3 = input('Введите координату y1 вершины C: ')
x4 = input('Введите координату х1 вершины D: ')
y4 = input('Введите координату y1 вершины D: ')

def parallelogram(x1, y1, x2, y2, x3, y3, x4, y4):
    if ((x1 + x3 == y1 + y3) and (x2 + x4 == y2 + y4)):
        print('A' + '[' + x1 + ';' + y1 + ']' + 'B' + '[' + x2 + ';' + y2 + ']' + 'C' + '[' + x3 + ';' + y3 + ']' + 'D' + '[' + x4 + ';' + y4 + ']')
        return 'Это параллелограмм.'
    else:
        print('A' + '[' + x1 + ';' + y1 + ']' + 'B' + '[' + x2 + ';' + y2 + ']' + 'C' + '[' + x3 + ';' + y3 + ']' + 'D' + '[' + x4 + ';' + y4 + ']')
        return 'Это не параллелограмм.'

print('='*60)
print(parallelogram(x1, y1, x2, y2, x3, y3, x4, y4))
